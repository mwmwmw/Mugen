{"version":3,"sources":["webpack://MusicGenerator/webpack/bootstrap","webpack://MusicGenerator/./src/constants.js","webpack://MusicGenerator/./src/chords.js","webpack://MusicGenerator/./src/scale.js","webpack://MusicGenerator/./src/melody.js","webpack://MusicGenerator/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","check","probablity","Math","random","random_powerlaw","mini","maxi","ceil","exp","log","countValue","arr","start","reduce","a","v","sort","b","shuffle","array","shuffledArray","slice","length","floor","CHORD_PATTERNS","PENTA","TRIAD","SUS2","SUS4","SEVENTH","NINTH","ELEVENTH","CHORD_IDENTITIES","MAJOR","MAJOR_1ST_INVERSION","MAJOR_2ND_INVERSION","MINOR","MINOR_1ST_INVERSION","MINOR_2ND_INVERSION","DIMINISHED","DIMINISHED_1ST_INVERSION","DIMINISHED_2ND_INVERSION","AUGMENTED","fromScale","scale","chordPattern","chords","map","push","chordAtIndex","index","chordIdentity","chord","identify","keys","sortedChord","filter","k","matchChord","rootNote","bassNote","bassTranspose","rotateScale","steps","splice","concat","SCALE_SIZE_IN_STEPS","WESTERN","PENTATONIC","HEXATONIC","SCALE_PATTERNS","CHROMATIC","DORIAN","PHYGIAN","LYDIAN","MYXOLYDIAN","LOCRIAN","biggestSemitoneLeap","currentCount","octave","generateSemitonePattern","Array","fill","total","biggest","val","generate","semitones","range","notes","sum","fitsOctave","octaveRemainder","extractRawSemitonePattern","newNotes","undefined","reconstructScale","transposeNotes","amountInSemitones","transpose","note","amount","filterRandomNotes","probability","randomNote","mutatePattern","pattern","newPattern","calculateSequence","structure","generateMelodyStructure","offset","sequence","beat","gen","__webpack_exports__","chords_namespaceObject","scale_namespaceObject","constants_namespaceObject","melody_namespaceObject"],"mappings":"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","file":"js/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const check = probablity => Math.random() < probablity;\r\n\r\nexport const random_powerlaw = (mini, maxi) => {\r\n  return Math.ceil(\r\n    Math.exp(Math.random() * (Math.log(maxi) - Math.log(mini))) * mini\r\n  );\r\n};\r\n\r\nexport const countValue = (arr, value = true, start = 0) => {\r\n  return arr.reduce((a, v) => (v === value ? a + 1 : a), start);\r\n};\r\n\r\nexport const sort = (a, b) => a - b;\r\n\r\n\r\nexport const shuffle = (array) => {\r\n  let shuffledArray = array.slice();\r\n  var m = shuffledArray.length, t, i;\r\n  while (m) {\r\n    i = Math.floor(Math.random() * m--);\r\n    t = shuffledArray[m];\r\n    shuffledArray[m] = shuffledArray[i];\r\n    shuffledArray[i] = t;\r\n  }\r\n  return shuffledArray;\r\n}","import {\r\n    sort\r\n} from \"./constants\"\r\n\r\nexport const CHORD_PATTERNS = {\r\n    PENTA: [0, 2],\r\n    TRIAD: [0, 2, 4],\r\n    SUS2: [0, 1, 4],\r\n    SUS4: [0, 3, 4],\r\n    SEVENTH: [0, 2, 4, 6],\r\n    NINTH: [0, 2, 4, 6, 8],\r\n    ELEVENTH: [0, 2, 4, 6, 8, 10]\r\n};\r\n\r\nexport const CHORD_IDENTITIES = {\r\n    MAJOR: [0, 4, 7],\r\n    MAJOR_1ST_INVERSION: [0, 5, 9],\r\n    MAJOR_2ND_INVERSION: [0, 3, 8],\r\n    MINOR: [0, 3, 7],\r\n    MINOR_1ST_INVERSION: [0, 4, 9],\r\n    MINOR_2ND_INVERSION: [0, 5, 8],\r\n    DIMINISHED: [0, 3, 6],\r\n    DIMINISHED_1ST_INVERSION: [0, 3, 9],\r\n    DIMINISHED_2ND_INVERSION: [0, 6, 9],\r\n    AUGMENTED: [0, 4, 8]\r\n}\r\n\r\n\r\nexport const fromScale = (scale, chordPattern) => {\r\n    let chords = [];\r\n    scale.map((v, i) => {\r\n        chords.push(chordAtIndex(i, scale, chordPattern))\r\n    });\r\n    return chords;\r\n}\r\n\r\nexport const chordAtIndex = (index, scale, chordIdentity) => {\r\n    let chord = [];\r\n    chordIdentity.map((p) => {\r\n        chord.push(scale[(index + p) % scale.length])\r\n    })\r\n    return chord;\r\n}\r\n\r\nexport const identify = (chord) => {\r\n    let keys = Object.keys(CHORD_IDENTITIES);\r\n    let sortedChord = chord.slice().sort(sort);\r\n    return keys.filter(k => {\r\n        let chordIdentity = CHORD_IDENTITIES[k].slice();\r\n        return matchChord(sortedChord, chordIdentity)\r\n    })\r\n}\r\n\r\nexport const matchChord = (chord, chordIdentity) => {\r\n    let rootNote = chord[0]\r\n    let id = chordIdentity.filter((n, i) => {\r\n        return n === (chord[i] - rootNote);\r\n    })\r\n    return id.length === chordIdentity.length;\r\n}\r\n\r\nexport const bassNote = (chord, bassTranspose = -24) => {\r\n    return chord.sort(sort)[0] + bassTranspose;\r\n}","import { sort } from \"./constants\"\r\n\r\nexport const rotateScale = (scale, steps) => {\r\n  let array = scale.slice();\r\n  return array.splice(steps, array.length).concat(array.splice(0, steps));\r\n}\r\n\r\nconst SEMITONES_IN_OCTAVE = 12;\r\n\r\nconst MIDI_MIDDLE_C = 60;\r\n\r\nconst DEFAULT_SCALE_RANGE = 24;\r\n\r\nconst MAJOR = [2,2,1,2,2,2,1];\r\n\r\nexport const SCALE_SIZE_IN_STEPS = {\r\n  WESTERN: 7,\r\n  PENTATONIC: 5,\r\n  HEXATONIC: 6,\r\n}\r\n\r\nexport const SCALE_PATTERNS = {\r\n  CHROMATIC: [1,1,1,1,1,1,1,1,1,1,1,1],\r\n  MAJOR: MAJOR,\r\n  DORIAN: rotateScale(MAJOR,1),\r\n  PHYGIAN: rotateScale(MAJOR,2),\r\n  LYDIAN: rotateScale(MAJOR,3),\r\n  MYXOLYDIAN: rotateScale(MAJOR,4),\r\n  MINOR: rotateScale(MAJOR,5),\r\n  LOCRIAN: rotateScale(MAJOR,6),\r\n  PENTA: [2, 3, 2, 2, 3],\r\n}\r\n\r\n// calculates the biggest semitone leap that is possible provided the number of remaining steps\r\nexport const biggestSemitoneLeap = (steps = SCALE_SIZE_IN_STEPS.WESTERN, currentCount = 0, octave = SEMITONES_IN_OCTAVE) => {\r\n  return (octave-currentCount) - steps + 1;\r\n}\r\n\r\n// generates a random semitone pattern that equal 12\r\nexport const generateSemitonePattern = (length = SCALE_SIZE_IN_STEPS.WESTERN) => {\r\n  let scale = new Array(length).fill(0);\r\n  let total = 0;\r\n  scale.map((v, i)=>{\r\n    let biggest = biggestSemitoneLeap(length-i, total);\r\n    let val = Math.ceil(Math.random()*biggest);\r\n    total += val;\r\n    scale[i] = val;\r\n  })\r\n  return scale;\r\n}\r\n\r\nexport const generate = (semitones, rootNote = MIDI_MIDDLE_C, range = DEFAULT_SCALE_RANGE) => {\r\n    let notes = [];\r\n    for (let i = 0; i < range; i++) {\r\n      notes.push(rootNote);\r\n      const inc = semitones[i % semitones.length];\r\n      rootNote += inc;\r\n    }\r\n    return notes; \r\n  }; \r\n\r\nexport const sum = scale => scale.reduce((a, v) => a + v);\r\n\r\nexport const fitsOctave = (scale) => sum(scale)%SEMITONES_IN_OCTAVE === 0;\r\n\r\nexport const octaveRemainder = (scale) => sum(scale)%SEMITONES_IN_OCTAVE;\r\n\r\nexport const extractRawSemitonePattern = (notes) => {\r\n  let newNotes = notes.slice().sort(sort);\r\n  return newNotes.map((n,i)=>{\r\n    if(i+1 < newNotes.length) { return newNotes[i+1] - n };\r\n  }).filter((n)=>n!=undefined);\r\n}\r\n\r\nexport const reconstructScale = (notes) => {\r\n\r\n}\r\n\r\n  export const transposeNotes = (notes, amountInSemitones) => {\r\n      let newNotes = notes.slice();\r\n      return newNotes.map((n)=>transpose(n, amountInSemitones)); \r\n  }\r\n\r\n  export const transpose = (note, amount) => {\r\n    return note + amount;\r\n  }\r\n\r\n","import {\r\n    check,\r\n    shuffle\r\n} from \"./constants\";\r\n\r\n\r\nexport const filterRandomNotes = (notes, probability = 0.5) => {\r\n    return notes.filter(n => check(probability));\r\n}\r\n\r\nexport const randomNote = (notes) => {\r\n    return shuffle(notes)[0];\r\n}\r\n\r\nexport const mutatePattern = (pattern, notes) => {\r\n    let newPattern = pattern.slice();\r\n        newPattern.map((n, i) => {\r\n            return check(i / newPattern.length) ?\r\n                newPattern[i] :\r\n                notes[Math.floor(Math.random() * notes.length)];\r\n        });\r\n return newPattern;\r\n};\r\n\r\nexport const calculateSequence = (\r\n    notes,\r\n    length = 16,\r\n    structure = generateMelodyStructure(),\r\n    offset = 0\r\n) => {\r\n    let sequence = new Array(length).fill(-1);\r\n    let index = -1;\r\n    let prog = length / 4;\r\n    sequence.map((n, i) => {\r\n        let beat = i / length;\r\n        let gen = Math.random();\r\n        if (gen > beat) {\r\n            index++;\r\n        } else if (gen < 0.33333) {\r\n            index--;\r\n        } else {\r\n            index = Math.floor(Math.random() * notes.length);\r\n        }\r\n        if (index < 0) {\r\n            index += notes.length;\r\n        }\r\n\r\n        sequence[i] = structure[i % structure.length] ?\r\n            notes[index % notes.length] + offset :\r\n            -1;\r\n    });\r\n    return sequence;\r\n};","import { check } from \"./constants\";\r\n\r\nimport * as chords from \"./chords\";\r\nimport * as scale from \"./scale\"; \r\nimport * as melody from \"./melody\"; \r\n//export { generateSong } from \"./generator\";  \r\n\r\nimport  * as utils from \"./constants\";\r\n\r\nexport { chords, scale, utils, melody };"],"sourceRoot":""}