{"version":3,"sources":["webpack://Mugen/webpack/bootstrap","webpack://Mugen/./src/constants.js","webpack://Mugen/./src/utils.js","webpack://Mugen/./src/chord.js","webpack://Mugen/./src/scale.js","webpack://Mugen/./src/melody.js","webpack://Mugen/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CHORD_PATTERNS","PENTA","TRIAD","SUS2","SUS4","SEVENTH","NINTH","ELEVENTH","CHORD_IDENTITIES","MAJOR","MAJOR_1ST_INVERSION","MAJOR_2ND_INVERSION","MINOR","MINOR_1ST_INVERSION","MINOR_2ND_INVERSION","DIMINISHED","DIMINISHED_1ST_INVERSION","DIMINISHED_2ND_INVERSION","AUGMENTED","SCALE_SIZE_IN_STEPS","WESTERN","PENTATONIC","HEXATONIC","check","probability","Math","random","countValue","arr","start","reduce","a","v","sort","b","shuffle","array","shuffledArray","slice","length","floor","atIndex","index","scale","chordIdentity","chord","map","push","fromScale","chordPattern","chords","identify","keys","sortedChord","filter","k","matchChord","rootNote","bassNote","bassTranspose","rotateScale","steps","splice","concat","SCALE_PATTERNS","CHROMATIC","DORIAN","PHYGIAN","LYDIAN","MYXOLYDIAN","LOCRIAN","biggestSemitoneLeap","currentCount","octave","generateSemitonePattern","Array","fill","sum","refit","selector","generate","semitones","range","notes","fitsOctave","octaveRemainder","extractRawSemitonePattern","newNotes","undefined","reconstructScale","transposeNotes","amountInSemitones","transpose","note","amount","makeScale","filterRandomNotes","randomNote","mutatePattern","pattern","newPattern","__webpack_exports__","chord_namespaceObject","scale_namespaceObject","utils_namespaceObject","melody_namespaceObject"],"mappings":"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","file":"js/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const CHORD_PATTERNS = {\r\n  PENTA: [0, 2],\r\n  TRIAD: [0, 2, 4],\r\n  SUS2: [0, 1, 4],\r\n  SUS4: [0, 3, 4],\r\n  SEVENTH: [0, 2, 4, 6],\r\n  NINTH: [0, 2, 4, 6, 8],\r\n  ELEVENTH: [0, 2, 4, 6, 8, 10]\r\n};\r\n\r\nexport const CHORD_IDENTITIES = {\r\n  MAJOR: [0, 4, 7],\r\n  MAJOR_1ST_INVERSION: [0, 5, 9],\r\n  MAJOR_2ND_INVERSION: [0, 3, 8],\r\n  MINOR: [0, 3, 7],\r\n  MINOR_1ST_INVERSION: [0, 4, 9],\r\n  MINOR_2ND_INVERSION: [0, 5, 8],\r\n  DIMINISHED: [0, 3, 6],\r\n  DIMINISHED_1ST_INVERSION: [0, 3, 9],\r\n  DIMINISHED_2ND_INVERSION: [0, 6, 9],\r\n  AUGMENTED: [0, 4, 8]\r\n}\r\n\r\nexport const SEMITONES_IN_OCTAVE = 12;\r\n\r\nexport const MIDI_MIDDLE_C = 60;\r\n\r\nexport const DEFAULT_SCALE_RANGE = 24;\r\n\r\nexport const MAJOR = [2,2,1,2,2,2,1];\r\n\r\nexport const SCALE_SIZE_IN_STEPS = {\r\n  WESTERN: 7,\r\n  PENTATONIC: 5,\r\n  HEXATONIC: 6,\r\n}\r\n\r\nconst SONG_PART = {\r\n  A: \"A\",\r\n  B: \"B\",\r\n  C: \"C\",\r\n  INTRO: \"INTRO\",\r\n  OUTRO: \"OUTRO\"\r\n};","export const check = probability => Math.random() < probability;\r\n\r\nexport const countValue = (arr, value = true, start = 0) => {\r\n  return arr.reduce((a, v) => (v === value ? a + 1 : a), start);\r\n};\r\n\r\nexport const sort = (a, b) => a - b;\r\n\r\nexport const shuffle = (array) => {\r\n  let shuffledArray = array.slice();\r\n  var m = shuffledArray.length, t, i;\r\n  while (m) {\r\n    i = Math.floor(Math.random() * m--);\r\n    t = shuffledArray[m];\r\n    shuffledArray[m] = shuffledArray[i];\r\n    shuffledArray[i] = t;\r\n  }\r\n  return shuffledArray;\r\n}","import {\r\n    CHORD_IDENTITIES\r\n} from \"./constants\"\r\n\r\nimport {\r\n    sort\r\n} from \"./utils\"\r\n\r\nexport const atIndex = (index, scale, chordIdentity) => {\r\n    let chord = [];\r\n    chordIdentity.map((p) => { \r\n        chord.push(scale[(index + p) % scale.length])\r\n    })\r\n    return chord;\r\n} \r\n\r\n\r\nexport const fromScale = (scale, chordPattern) => {\r\n    let chords = [];\r\n    scale.map((v, i) => {\r\n        chords.push(atIndex(i, scale, chordPattern))\r\n    });\r\n    return chords;\r\n}\r\n\r\nexport const identify = (chord) => {\r\n    let keys = Object.keys(CHORD_IDENTITIES);\r\n    let sortedChord = chord.slice().sort(sort);\r\n    return keys.filter(k => {\r\n        let chordIdentity = CHORD_IDENTITIES[k].slice();\r\n        return matchChord(sortedChord, chordIdentity)\r\n    })\r\n}\r\n\r\nexport const matchChord = (chord, chordIdentity) => {\r\n    let rootNote = chord[0]\r\n    let id = chordIdentity.filter((n, i) => {\r\n        return n === (chord[i] - rootNote);\r\n    })\r\n    return id.length === chordIdentity.length;\r\n}\r\n\r\nexport const bassNote = (chord, bassTranspose = -24) => {\r\n    return chord.sort(sort)[0] + bassTranspose;\r\n}","export const rotateScale = (scale, steps) => {\r\n  let array = scale.slice();\r\n  return array.splice(steps, array.length).concat(array.splice(0, steps));\r\n}\r\n\r\nimport {\r\n  SEMITONES_IN_OCTAVE,\r\n  SCALE_SIZE_IN_STEPS,\r\n  MIDI_MIDDLE_C,\r\n  DEFAULT_SCALE_RANGE,\r\n  MAJOR,\r\n} from \"./constants\"\r\n\r\nexport const SCALE_PATTERNS = {\r\n  CHROMATIC: [1,1,1,1,1,1,1,1,1,1,1,1],\r\n  MAJOR: MAJOR,\r\n  DORIAN: rotateScale(MAJOR,1),\r\n  PHYGIAN: rotateScale(MAJOR,2),\r\n  LYDIAN: rotateScale(MAJOR,3),\r\n  MYXOLYDIAN: rotateScale(MAJOR,4),\r\n  MINOR: rotateScale(MAJOR,5),\r\n  LOCRIAN: rotateScale(MAJOR,6),\r\n  PENTA: [2, 3, 2, 2, 3],\r\n}\r\n\r\nimport { sort, check } from \"./utils\"\r\n\r\n\r\n\r\n// calculates the biggest semitone leap that is possible provided the number of remaining steps\r\nexport const biggestSemitoneLeap = (steps = SCALE_SIZE_IN_STEPS.WESTERN, currentCount = 0, octave = SEMITONES_IN_OCTAVE) => {\r\n  return (octave-currentCount) - steps + 1;\r\n}\r\n\r\n// generates a random semitone pattern that equal 12\r\nexport const generateSemitonePattern = (length = SCALE_SIZE_IN_STEPS.WESTERN, octave = SEMITONES_IN_OCTAVE) => {\r\n  let scale = new Array(length).fill(1);\r\n  while(sum(scale) < octave) {\r\n    scale = scale.map(v=> {\r\n    return  check(0.5) ? v+1 : v;\r\n    })\r\n  }\r\n  return refit(scale);\r\n}\r\n\r\nexport const refit = (scale, octave = SEMITONES_IN_OCTAVE) => {\r\n  var selector = 0;\r\n  while(sum(scale) != octave) {\r\n    selector = Math.floor(Math.random()*scale.length);\r\n    if(scale[selector] > 1) {\r\n      sum(scale) > octave ? scale[selector]-- : scale[selector]++;\r\n    }\r\n  }\r\n  return scale;\r\n}\r\n\r\nexport const generate = (semitones, rootNote = MIDI_MIDDLE_C, range = DEFAULT_SCALE_RANGE) => {\r\n    let notes = [];\r\n    for (let i = 0; i < range; i++) {\r\n      notes.push(rootNote);\r\n      const inc = semitones[i % semitones.length];\r\n      rootNote += inc;\r\n    }\r\n    return notes; \r\n  }; \r\n\r\nexport const sum = scale => scale.reduce((a, v) => a + v);\r\n\r\nexport const fitsOctave = (scale) => sum(scale)%SEMITONES_IN_OCTAVE === 0;\r\n\r\nexport const octaveRemainder = (scale) => sum(scale)%SEMITONES_IN_OCTAVE;\r\n\r\nexport const extractRawSemitonePattern = (notes) => {\r\n  let newNotes = notes.slice().sort(sort);\r\n  return newNotes.map((n,i)=>{\r\n    if(i+1 < newNotes.length) { return newNotes[i+1] - n };\r\n  }).filter((n)=>n!=undefined);\r\n}\r\n\r\nexport const reconstructScale = (notes) => {\r\n\r\n}\r\n\r\nexport const transposeNotes = (notes, amountInSemitones) => {\r\n    let newNotes = notes.slice();\r\n    return newNotes.map((n)=>transpose(n, amountInSemitones)); \r\n}\r\n\r\nexport const transpose = (note, amount) => {\r\n  return note + amount;\r\n}\r\n\r\nexport const makeScale = () =>{\r\n   return generate(generateSemitonePattern(), 60, 24);\r\n}","import {\r\n    check,\r\n    shuffle\r\n} from \"./utils\";\r\n\r\n\r\nexport const filterRandomNotes = (notes, probability = 0.5) => {\r\n    return notes.filter(n => check(probability));\r\n}\r\n\r\nexport const randomNote = (notes) => {\r\n    return shuffle(notes)[0];\r\n}\r\n\r\nexport const mutatePattern = (pattern, notes) => {\r\n    let newPattern = pattern.slice();\r\n    newPattern.map((n, i) => {\r\n        return check(i / newPattern.length) ?\r\n            newPattern[i] :\r\n            notes[Math.floor(Math.random() * notes.length)];\r\n    });\r\n    return newPattern;\r\n};\r\n\r\n// export const calculateSequence = (\r\n//     notes,\r\n//     length = 16,\r\n//     structure = generateMelodyStructure(),\r\n//     offset = 0\r\n// ) => {\r\n//     let sequence = new Array(length).fill(-1);\r\n//     let index = -1;\r\n//     let prog = length / 4;\r\n//     sequence.map((n, i) => {\r\n//         let beat = i / length;\r\n//         let gen = Math.random();\r\n//         if (gen > beat) {\r\n//             index++;\r\n//         } else if (gen < 0.33333) {\r\n//             index--;\r\n//         } else {\r\n//             index = Math.floor(Math.random() * notes.length);\r\n//         }\r\n//         if (index < 0) {\r\n//             index += notes.length;\r\n//         }\r\n\r\n//         sequence[i] = structure[i % structure.length] ?\r\n//             notes[index % notes.length] + offset :\r\n//             -1;\r\n//     });\r\n//     return sequence;\r\n// };","import * as chord from \"./chord\";\r\nimport * as scale from \"./scale\"; \r\nimport * as melody from \"./melody\"; \r\nimport * as utils from \"./utils\";\r\n\r\nimport { SCALE_PATTENRS } from \"./scale\";\r\n\r\nimport {\r\n    CHORD_IDENTITIES,\r\n    CHORD_PATTERNS,\r\n    SEMITONES_IN_OCTAVE,\r\n    MIDI_MIDDLE_C,\r\n    DEFAULT_SCALE_RANGE,\r\n    MAJOR,\r\n    SCALE_SIZE_IN_STEPS,\r\n    SONG_PARTS\r\n} from \"./constants\";\r\n\r\nexport { \r\n    chord, \r\n    scale, \r\n    utils, \r\n    melody, \r\n    CHORD_IDENTITIES,\r\n    CHORD_PATTERNS,\r\n    SEMITONES_IN_OCTAVE,\r\n    MIDI_MIDDLE_C,\r\n    DEFAULT_SCALE_RANGE,\r\n    MAJOR,\r\n    SCALE_SIZE_IN_STEPS,\r\n    SONG_PARTS,\r\n    SCALE_PATTENRS\r\n};"],"sourceRoot":""}