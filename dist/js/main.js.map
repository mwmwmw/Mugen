{"version":3,"sources":["webpack://MusicGenerator/webpack/bootstrap","webpack://MusicGenerator/./src/constants.js","webpack://MusicGenerator/./src/chords.js","webpack://MusicGenerator/./src/scale.js","webpack://MusicGenerator/./src/rhythm.js","webpack://MusicGenerator/./src/generator.js","webpack://MusicGenerator/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","check","probablity","Math","random","sort","a","b","CHORD_IDENTITIES","MAJOR","MAJOR_1ST_INVERSION","MAJOR_2ND_INVERSION","MINOR","MINOR_1ST_INVERSION","MINOR_2ND_INVERSION","DIMINISHED","DIMINISHED_1ST_INVERSION","DIMINISHED_2ND_INVERSION","computeChords","scale","chordPattern","chords","map","v","push","computeChord","index","chord","length","identifyChordType","keys","sortedChord","slice","filter","k","chordIdentity","matchChord","rootNote","console","log","generateScale","semitones","range","notes","pickMelodyNotes","calculateSequence","structure","generateMelodyStructure","offset","sequence","Array","fill","beat","gen","floor","mutatePattern","pattern","newPattern","generateSong","beats","measure","rhythm","pulse","generateRhythm","noteCount","arr","start","reduce","countValue","allNotes","melodyNotes","seqA","seqB","melodyNotes2","seqC","concat","__webpack_exports__"],"mappings":"kCACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,yCClFO,MAAAC,EAAAC,GACPC,KAAAC,SAAAF,EAaOG,EAAA,CAAAC,EAAAC,IACPD,EAAAC,GAAA,ICHOC,GACPC,OAAA,OACAC,qBAAA,OACAC,qBAAA,OACAC,OAAA,OACAC,qBAAA,OACAC,qBAAA,OACAC,YAAA,OACAC,0BAAA,OACAC,0BAAA,QAIOC,EAAA,CAAAC,EAAAC,KACP,IAAAC,KAIA,OAHAF,EAAAG,IAAA,CAAAC,EAAAtD,KACAoD,EAAAG,KAAAC,EAAAxD,EAAAkD,EAAAC,MAEAC,GAGOI,EAAA,CAAAC,EAAAP,EAAAC,KACP,IAAAO,KAIA,OAHAP,EAAAE,IAAAvB,IACA4B,EAAAH,KAAAL,GAAAO,EAAA3B,GAAAoB,EAAAS,WAEAD,GAGOE,EAAAF,IACP,IAAAG,EAAAnD,OAAAmD,KAAAtB,GACAuB,EAAAJ,EAAAK,QAAA3B,KAAyCA,GACzC,OAAAyB,EAAAG,OAAAC,IACA,IAAAC,EAAA3B,EAAA0B,GAAAF,QACA,OAAAI,EAAAL,EAAAI,MAKOC,EAAA,CAAAT,EAAAQ,KAEP,IAAAE,EAAAV,EAAA,GAMA,OALAW,QAAAC,IAAAZ,GACAQ,EAAAF,OAAA,CAAAvC,EAAAzB,KACAqE,QAAAC,IAAAZ,EAAA1D,GAAAoE,GACA3C,IAAAiC,EAAA1D,GAAAoE,IAEAT,SAAAO,EAAAP,QC1DOY,EAAA,CAAAC,EAAAJ,EAAA,GAAAK,EAAA,MACP,IAAAC,GAAAN,GACA,QAAApE,EAAA,EAAmBA,EAAAyE,EAAWzE,IAAA,CAE9BoE,GADAI,EAAAxE,EAAAwE,EAAAb,QAEAe,EAAAnB,KAAAa,GAEA,OAAAM,GCNO,MCMAC,EAAAzB,IAEP,OADAA,EAAAa,QACAC,OAAAvC,IACQO,EAAK,MAKN4C,EAAA,CACPF,EACAf,EAAA,GACAkB,EAAAC,0BACAC,EAAA,KAEA,IAAAC,EAAA,IAAAC,MAAAtB,GAAAuB,MAAA,GACAzB,GAAA,EAoBA,OAlBAuB,EAAA3B,IAAA,CAAA5B,EAAAzB,KACA,IAAAmF,EAAAnF,EAAA2D,EACAyB,EAAAlD,KAAAC,SACAiD,EAAAD,EACA1B,IACK2B,EAAA,OACL3B,IAEAA,EAAAvB,KAAAmD,MAAAnD,KAAAC,SAAAuC,EAAAf,QAEAF,EAAA,IACAA,GAAAiB,EAAAf,QAGAqB,EAAAhF,GAAA6E,EAAA7E,EAAA6E,EAAAlB,QACAe,EAAAjB,EAAAiB,EAAAf,QAAAoB,GACA,IAEAC,GAGOM,EAAA,CAAAC,EAAAb,KACP,IAAAc,EAAAD,EAAAxB,QAQA,OANAyB,EAAAnC,IAAA,CAAA5B,EAAAzB,KACAwF,EAAAxF,GAAoBgC,EAAKhC,EAAAwF,EAAA7B,QACzB6B,EAAAxF,GACA0E,EAAAxC,KAAAmD,MAAAnD,KAAAC,SAAAuC,EAAAf,WAGA6B,GAWOC,EAAA,CACPvC,EACAwC,EAAA,EACAC,EAAA,EACAd,GAAA,4BAEA,IAAAe,EDtEO,EAAAF,EAAA,EAAAC,EAAA,KACP,IAAAX,EAAA,IAAAC,MAAAS,EAAAC,GAAAT,KAAA,GAKA,OAJAF,EAAA3B,IAAA,CAAA5B,EAAAzB,KACA,IAAA6F,EAAA,GAAA7F,EAAA0F,EAAA,GACAV,EAAAhF,GAAoBgC,EAAK6D,KAEzBb,GCgEec,CAAcJ,EAAAC,GAE7BI,EJhEO,EAAAC,EAAA/E,GAAA,EAAAgF,EAAA,IACPD,EAAAE,OAAA,CAAA7D,EAAAiB,QAAArC,EAAAoB,EAAA,EAAAA,EAAA4D,GI+DkBE,CAAUP,GAAA,GAE5BvB,QAAAC,IAAAyB,GAEA,IAAApC,EAAA+B,EAAAC,EACAS,EAAiB7B,EAAarB,EAAAsB,WAE9B6B,EAAA1B,EAAAyB,GAEAE,EAAA1B,EAAAyB,EAAA1C,EAAAiC,GACAW,EAAA3B,EAAAyB,EAAA1C,EAAAiC,GACAY,EAAA7B,EAAAyB,GACAK,EAAA7B,EAAA4B,EAAA,EAAA7C,EAAAiC,GAAA,GAEA,SACAc,OAAAJ,GACAI,OAAApB,EAAAgB,EAAAC,IACAG,OAAAJ,GACAI,OAAApB,EAAAgB,EAAAG,IACAC,OAAAH,GACAG,OAAApB,EAAAiB,EAAAD,IACAI,OAAAH,GACAG,OAAApB,EAAAiB,EAAAH,IACAM,OAAApB,EAAAgB,EAAAC,IACAG,OAAAD,GACAC,OAAAJ,GACAI,OAAApB,EAAAgB,EAAAC,IACAG,OAAAH,GACAG,OAAApB,EAAAiB,EAAAD,KCtGA1G,EAAAU,EAAAqG,EAAA,kCAAA1D,IAAArD,EAAAU,EAAAqG,EAAA,sCAAA/C,IAAAhE,EAAAU,EAAAqG,EAAA,kCAAApC,IAAA3E,EAAAU,EAAAqG,EAAA,iCAAAlB","file":"js/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const check = probablity => {\r\n  return Math.random() < probablity;\r\n};\r\n\r\nexport const random_powerlaw = (mini, maxi) => {\r\n  return Math.ceil(\r\n    Math.exp(Math.random() * (Math.log(maxi) - Math.log(mini))) * mini\r\n  );\r\n};\r\n\r\nexport const countValue = (arr, value = true, start = 0) => {\r\n  return arr.reduce((a, v) => (v === value ? a + 1 : a), start);\r\n};\r\n\r\nexport const sort = (a, b) => {\r\n  return a < b ? -1 : 1;\r\n}","import { sort } from \"./constants\"\r\n\r\nexport const CHORD_PATTERNS = {\r\n    PENTA: [0, 2],\r\n    TRIAD: [0, 2, 4],\r\n    SUS2: [0, 1, 4],\r\n    SUS4: [0, 3, 4],\r\n    SEVENTH: [0, 2, 4, 6],\r\n    NINTH: [0, 2, 4, 6, 8],\r\n    ELEVENTH: [0, 2, 4, 6, 8, 10]\r\n  };\r\n  \r\nexport const CHORD_IDENTITIES = {\r\n    MAJOR: [0, 4, 7],\r\n    MAJOR_1ST_INVERSION: [0, 5, 9],\r\n    MAJOR_2ND_INVERSION: [0, 3, 8],\r\n    MINOR: [0, 3, 7],\r\n    MINOR_1ST_INVERSION: [0, 4, 9],\r\n    MINOR_2ND_INVERSION: [0, 5, 8],\r\n    DIMINISHED: [0, 3, 6],\r\n    DIMINISHED_1ST_INVERSION: [0, 3, 9],\r\n    DIMINISHED_2ND_INVERSION: [0, 6, 9],\r\n}\r\n\r\n\r\nexport const computeChords = (scale, chordPattern) => {\r\n    let chords = [];\r\n    scale.map((v,i)=>{\r\n        chords.push(computeChord(i, scale, chordPattern))\r\n    });\r\n    return chords;\r\n}\r\n\r\nexport const computeChord = (index, scale, chordPattern) => {\r\n    let chord = [];\r\n    chordPattern.map((p)=>{\r\n        chord.push(scale[(index+p)%scale.length])\r\n    })\r\n    return chord;\r\n}\r\n\r\nexport const identifyChordType = (chord) => {\r\n    let keys = Object.keys(CHORD_IDENTITIES);\r\n    let sortedChord = chord.slice().sort(sort);\r\n    return keys.filter(k=>{\r\n        let chordIdentity = CHORD_IDENTITIES[k].slice();\r\n        return matchChord(sortedChord, chordIdentity)\r\n    })\r\n\r\n}\r\n \r\nexport const matchChord = (chord, chordIdentity) => {\r\n\r\n    let rootNote = chord[0]\r\n    console.log(chord)\r\n    let id = chordIdentity.filter((n,i)=>{\r\n        console.log((chord[i]-rootNote));\r\n        return n === (chord[i]-rootNote);\r\n    })\r\n    return id.length === chordIdentity.length;\r\n}","\r\nexport const generateScale = (semitones, rootNote = 60, range = 24) => {\r\n    let notes = [rootNote];\r\n    for (let i = 0; i < range; i++) {\r\n      const inc = semitones[i % semitones.length];\r\n      rootNote += inc;\r\n      notes.push(rootNote);\r\n    }\r\n    return notes;\r\n  }; ","import {check} from \"./constants\";\r\n \r\nexport const generateRhythm = (beats = 4, measure = 4) => {\r\n    let sequence = new Array(beats * measure).fill(0);\r\n    sequence.map((n, i) => {\r\n      let pulse = 1 / ((i % beats) + 1);\r\n      sequence[i] = check(pulse);\r\n    });\r\n    return sequence;\r\n  };\r\n  \r\n  export const syncopate = (rhythm) => {\r\n    let newRythm = rhythm.slice();\r\n    newRythm.map((v)=>{\r\n        return v ? !v : check(Math.random())\r\n    })\r\n\r\n  }","import Schedge from \"schedule\";\r\n\r\nimport { check, countValue } from \"./constants\";\r\n\r\nimport { generateScale } from \"./scale\";\r\n\r\nimport { generateRhythm } from \"./rhythm\";\r\n\r\nexport const pickMelodyNotes = scale => {\r\n  let notes = scale.slice();\r\n  return notes.filter(n => {\r\n    if (check(0.5)) return false;\r\n    return true;\r\n  });\r\n};\r\n\r\nexport const calculateSequence = (\r\n  notes,\r\n  length = 16,\r\n  structure = generateMelodyStructure(),\r\n  offset = 0\r\n) => {\r\n  let sequence = new Array(length).fill(-1);\r\n  let index = -1;\r\n  let prog = length / 4;\r\n  sequence.map((n, i) => {\r\n    let beat = i / length;\r\n    let gen = Math.random();\r\n    if (gen > beat) {\r\n      index++;\r\n    } else if (gen < 0.33333) {\r\n      index--;\r\n    } else {\r\n      index = Math.floor(Math.random() * notes.length);\r\n    }\r\n    if (index < 0) {\r\n      index += notes.length;\r\n    }\r\n\r\n    sequence[i] = structure[i % structure.length]\r\n      ? notes[index % notes.length] + offset\r\n      : -1;\r\n  });\r\n  return sequence;\r\n};\r\n\r\nexport const mutatePattern = (pattern, notes) => {\r\n  let newPattern = pattern.slice();\r\n\r\n  newPattern.map((n, i) => {\r\n    newPattern[i] = check(i / newPattern.length)\r\n      ? newPattern[i]\r\n      : notes[Math.floor(Math.random() * notes.length)];\r\n  });\r\n\r\n  return newPattern;\r\n};\r\n\r\nconst SONG_PART = {\r\n  A: \"A\",\r\n  B: \"B\",\r\n  C: \"C\",\r\n  INTRO: \"INTRO\",\r\n  OUTRO: \"OUTRO\"\r\n};\r\n\r\nexport const generateSong = (\r\n  scale,\r\n  beats = 4,\r\n  measure = 4,\r\n  structure = [\"A\", \"B\", \"A\", \"C\", \"A\", \"B\"]\r\n) => {\r\n  let rhythm = generateRhythm(beats, measure);\r\n\r\n  let noteCount = countValue(rhythm, true);\r\n\r\n  console.log(noteCount);\r\n\r\n  let length = beats * measure;\r\n  let allNotes = generateScale(scale.semitones);\r\n\r\n  let melodyNotes = pickMelodyNotes(allNotes);\r\n\r\n  let seqA = calculateSequence(melodyNotes, length, rhythm);\r\n  let seqB = calculateSequence(melodyNotes, length, rhythm);\r\n  let melodyNotes2 = pickMelodyNotes(allNotes);\r\n  let seqC = calculateSequence(melodyNotes2, length * 4, rhythm, -5);\r\n\r\n  return []\r\n    .concat(seqA)\r\n    .concat(mutatePattern(seqA, seqB))\r\n    .concat(seqA)\r\n    .concat(mutatePattern(seqA, seqC))\r\n    .concat(seqB)\r\n    .concat(mutatePattern(seqB, seqA))\r\n    .concat(seqB)\r\n    .concat(mutatePattern(seqB, allNotes))\r\n    .concat(mutatePattern(seqA, seqB))\r\n    .concat(seqC)\r\n    .concat(seqA)\r\n    .concat(mutatePattern(seqA, seqB))\r\n    .concat(seqB)\r\n    .concat(mutatePattern(seqB, seqA));\r\n};\r\n","import { check } from \"./constants\";\r\n\r\nexport { computeChords, identifyChordType } from \"./chords\";\r\nexport { generateScale } from \"./scale\"; \r\nexport { generateSong } from \"./generator\";  "],"sourceRoot":""}